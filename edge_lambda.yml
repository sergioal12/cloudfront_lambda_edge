Resources:
  LambdaEdge:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.handler
        Role: !GetAtt LambdaIAMRole.Arn
        Code:
          ZipFile: |
            'use strict';
              exports.handler = (event, context, callback) => {
                const response = event.Records[0].cf.response;
                const headers = response.headers;
                headers['content-security-policy'] = [{
                  key: 'Content-Security-Policy',
                  value: "default-src 'none'; img-src 'self'; script-src 'self' https://cdnjs.cloudflare.com; style-src 'self' https://fonts.googleapis.com https://cdnjs.cloudflare.com; object-src 'none'; font-src 'self' https://fonts.googleapis.com"
                }];
                headers['x-content-type-options'] = [{
                  key: 'X-Content-Type-Options',
                  value: 'nosniff'
                }];
                headers['x-frame-options'] = [{
                  key: 'X-Frame-Options',
                  value: 'SAMEORIGIN'
                }];
                headers['x-permitted-cross-domain-policies'] = [{
                  key: 'X-Permitted-Cross-Domain-Policies',
                  value: 'master-only'
                }];
                headers['x-xss-protection'] = [{
                  key: 'X-XSS-Protection',
                  value: '1; mode=block'
                }];
                headers['referrer-policy'] = [{
                  key: 'Referrer-Policy',
                  value: 'SAME-ORIGIN'
                }];
                headers['strict-transport-security'] = [{
                  key: 'Strict-Transport-Security',
                  value: 'max-age=63072000; includeSubdomains; preload'
                }];
                callback(null, response);
            };
        Runtime: ${self:provider.runtime}
        MemorySize: 128
        Timeout: 1